name: FA wheels
run-name: FA wheels
on: [push]
jobs:

  build_wheels:
    name: Build Wheel
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
          os: [ubuntu-22.04]
          # python-version: ['3.9', '3.10']
          python-version: ['3.10']
          torch-version: ['1.13.1']
          cuda-version: ['117']

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      # - name: Set up Linux Env
      #   if: ${{ runner.os == 'Linux' }}
      #   run: |
      #     sudo rm -rf /usr/share/dotnet
      #     bash .github/workflows/env.sh
      #     # echo ${{ needs.create_release.outputs.upload_url }}
      #     # echo ${{ needs.steps.extract_branch.outputs.upload_url }}
      #   shell:
      #     bash

      # - name: Install CUDA ${{ matrix.cuda-version }}
      #   if: ${{ matrix.cuda-version != 'cpu' }}
      #   run: |
      #     bash .github/workflows/cuda/cu${{ matrix.cuda-version }}-${{ runner.os }}.sh
      #   shell:
      #     bash

      - name: Install CUDA ${{ matrix.cuda-version }}
        if: ${{ matrix.cuda-version != 'cpu' }}
        uses: Jimver/cuda-toolkit@v0.2.11
        id: cuda-toolkit
        with:
          cuda: '11.7.1'
          linux-local-args: ["--toolkit"]

      - name: Check GPU Env
        if: ${{ matrix.cuda-version != 'cpu' }}
        run: |
          source .github/workflows/cuda/cu${{ matrix.cuda-version }}-${{ runner.os }}-env.sh
          nvcc --version
        shell:
          bash

      - name: Install PyTorch ${{ matrix.torch-version }}+cu${{ matrix.cuda-version }}
        run: |
          pip install numpy pyyaml scipy ipython mkl mkl-include ninja cython typing pandas typing-extensions dataclasses && conda clean -ya
          pip install --no-index --no-cache-dir torch==${{ matrix.torch-version }} -f https://download.pytorch.org/whl/cu${{ matrix.cuda-version }}/torch_stable.html
          python --version
          python -c "import torch; print('PyTorch:', torch.__version__)"
          python -c "import torch; print('CUDA:', torch.version.cuda)"
          python -c "from torch.utils import cpp_extension; print (cpp_extension.CUDA_HOME)"
        shell:
          bash

      - name: Build wheel
        run: |
          export FLASH_ATTENTION_FORCE_BUILD="TRUE"
          export PATH=/usr/local/nvidia/bin:/usr/local/nvidia/lib64:$PATH
          export LD_LIBRARY_PATH=/usr/local/nvidia/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH
          pip install ninja packaging setuptools wheel
          python setup.py bdist_wheel --dist-dir=dist
          tmpname=cu${{ matrix.cuda-version }}torch${{ matrix.torch-version }}
          wheel_name=$(ls dist/*whl | xargs -n 1 basename | sed "s/-/+$tmpname-/2")
          ls dist/*whl |xargs -I {} mv {} dist/${wheel_name}
          echo "wheel_name=${wheel_name}" >> $GITHUB_ENV

      - name: Log Built Wheels
        run: |
          ls dist
